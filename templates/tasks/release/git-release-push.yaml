apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-release-push
  labels:
    {{- include "edp-tekton.labels" . | nindent 4 }}
spec:
  description: >-
    This Task is Golang task to build Go projects.
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: source
  params:
    - name: branch
      description: "For example: release/2.10"
      type: string
    - name: base_image
      description: "The execute image you want to use."
      default: "ghcr.io/tektoncd/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
      type: string
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  steps:
    - name: git-release-push
      image: $(params.base_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: BRANCH
          value: "$(params.branch)"
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/usr/bin/env sh
        set -ex

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
          eval $(ssh-agent -s)
          ssh-add "${PARAM_USER_HOME}"/.ssh/id_rsa
        fi

        export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"

        git push origin HEAD:${BRANCH} --tags
